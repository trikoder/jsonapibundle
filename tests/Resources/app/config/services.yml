parameters:
    trikoder.jsonapi.schema_class_map_provider.class: 'Trikoder\JsonApiBundle\Tests\Resources\JsonApi\SchemaClassMapService'

services:

  # default configuration for services in *this* file
  _defaults:
      autowire: true      # Automatically injects dependencies in your services.
      autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
      public: false       # Allows optimizing the container by removing unused services; this also means
                          # fetching services directly from the container via $container->get() won't work.
                          # The best practice is to be explicit about your dependencies anyway.

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  Trikoder\JsonApiBundle\Tests\Resources\Controller\:
      resource: '../../Controller'

  Symfony\Component\Routing\RouterInterface: '@router'

  Trikoder\JsonApiBundle\Contracts\SchemaClassMapProviderInterface:
      class: "%trikoder.jsonapi.schema_class_map_provider.class%"
      calls:
        - [add, ['\stdClass', '\Trikoder\JsonApiBundle\Schema\Builtin\StdClassSchema']]

  Trikoder\JsonApiBundle\Tests\Resources\Repository\SimpleFileModelRepository:
      class: 'Trikoder\JsonApiBundle\Tests\Resources\Repository\SimpleFileModelRepository'
      public: true

  Trikoder\JsonApiBundle\Tests\Resources\Repository\GenericModelRepository:
    class: 'Trikoder\JsonApiBundle\Tests\Resources\Repository\GenericModelRepository'
    public: true

  Trikoder\JsonApiBundle\Services\Neomerx\ServiceContainer:
      calls:
        - method: set
          arguments:
            - 'Symfony\Component\Routing\RouterInterface'
            - '@router'


  Trikoder\JsonApiBundle\Tests\Resources\Security\AuthenticatedUserProvider: ~
